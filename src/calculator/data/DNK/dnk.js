const axios = require('axios');
const countryData = require('../country-iso-names.json');
const { numericToAlpha3 } = require('i18n-iso-countries');
const { writeFile } = require('fs');
const { join } = require('path');
const Fuse = require('fuse.js');

function url(country, weight) {
  return `https://appservices.postdanmark.dk/PriceService.svc/GetPrices/${country}/${weight}`;
}

const websiteCountryNames = [
  'Afghanistan',
  'Ã…land Islands',
  'Albania',
  'Algeria',
  'Andorra',
  'Angola',
  'Anguilla',
  'Antigua and Barbuda',
  'Argentina',
  'Armenia',
  'Aruba',
  'Australia',
  'Austria',
  'Azerbaijan',
  'Azores',
  'Bahamas',
  'Bahrain',
  'Bangladesh',
  'Barbados',
  'Belarus',
  'Belgium',
  'Belize',
  'Benin',
  'Bermuda',
  'Bhutan',
  'Bolivia',
  'Bosnia and Herzegovina',
  'Botswana',
  'Brazil',
  'Brunei Darussalam',
  'Bulgaria',
  'Burkina Faso',
  'Burundi',
  'Cambodia',
  'Cameroon',
  'Canada',
  'Canary Islands',
  'Cape Verde',
  'Cayman Islands',
  'Central African Rep.',
  'Chad',
  'Chile',
  'China',
  'Colombia',
  'Comoros',
  'Congo (Rep.)',
  'Cook Islands',
  'Costa Rica',
  'Cote d Ivoire',
  'Croatia',
  'Cuba',
  'Curacao',
  'Cyprus',
  'Czech Republic',
  'Dem. Peoples Rep. of Korea',
  'Denmark',
  'Djibouti',
  'Dominica',
  'Dominican Republic',
  'East Timor',
  'Ecuador',
  'Egypt',
  'El Salvador',
  'Equatorial Guinea',
  'Eritrea',
  'Estonia',
  'Ethiopia',
  'Falkland Islands (Malvinas)',
  'Faroe Islands',
  'Fiji',
  'Finland',
  'France',
  'French Guiana',
  'French Polynesia',
  'Gabon',
  'Gambia',
  'Georgia',
  'Germany',
  'Ghana',
  'Gibraltar',
  'Great Britain',
  'Greece',
  'Greenland',
  'Grenada',
  'Guadeloupe',
  'Guatemala',
  'Guinea',
  'Guinea-Bissau',
  'Guyana',
  'Haiti',
  'Honduras',
  'Hongkong',
  'Hungary',
  'Iceland',
  'India',
  'Indonesia',
  'Iran',
  'Iraq',
  'Ireland',
  'Israel',
  'Italy',
  'Jamaica',
  'Japan',
  'Jordan',
  'Kazakhstan',
  'Kenya',
  'Kiribati',
  'Korea (Rep)',
  'Kosovo',
  'Kuwait',
  'Kyrgyzstan',
  'Lao People s Dem. Rep.',
  'Latvia',
  'Lebanon',
  'Lesotho',
  'Liberia',
  'Libyan Jamahiriya',
  'Liechtenstein',
  'Lithuania',
  'Luxembourg',
  'Macao (China)',
  'Madagascar',
  'Madeira',
  'Malawi',
  'Malaysia',
  'Maldives',
  'Mali',
  'Malta',
  'Martinique',
  'Mauritania',
  'Mauritius',
  'Mexico',
  'Micronesia',
  'Moldova',
  'Monaco',
  'Mongolia',
  'Montenegra',
  'Montserrat',
  'Morocco',
  'Mozambique',
  'Myanmar',
  'Namibia',
  'Nauru',
  'Nepal',
  'Netherlands',
  'New Caledonia',
  'New Zealand',
  'Nicaragua',
  'Niger',
  'Nigeria',
  'Norway',
  'Oman',
  'Pakistan',
  'Panama (Rep.)',
  'Papua New Guinea',
  'Paraguay',
  'Peru',
  'Philippines',
  'Pitcairn Islands',
  'Poland',
  'Portugal',
  'Qatar',
  'Reunion',
  'Romania',
  'Russian Federation',
  'Rwanda',
  'Saint Christopher (St. Kitts) and Nevis',
  'Saint Lucia',
  'Saint Vincent and the Grenadines',
  'Samoan Islands',
  'Sao Tome and Principe',
  'Saudi Arabia',
  'Senegal',
  'Serbia',
  'Seychelles',
  'Sierra Leone',
  'Singapore',
  'Sint Maarten',
  'Slovakia',
  'Slovenia',
  'Solomon Islands',
  'Somalia',
  'South Africa',
  'South Sudan',
  'Spain',
  'Sri Lanka',
  'St. Helena - Ascension and Trista da Cunha',
  'St. Kitts og Nevis',
  'Sudan',
  'Suriname',
  'Swaziland',
  'Sweden',
  'Switzerland',
  'Syrian Arab Rep.',
  'Taiwan',
  'Tajikistan',
  'Tanzania (United Rep.)',
  'Tavalu',
  'Territorial Community of St. Pierre and Miquelon',
  'Thailand',
  'The British Virgin Islands',
  'The former Yoguslav Republic of Macadonia',
  'Togo',
  'Tonga',
  'Trinidad and Tobago',
  'Tristan da Cunha',
  'Tunisia',
  'Turkey',
  'Turkmenistan',
  'Turks and Caicos Islands',
  'Uganda',
  'Ukraine',
  'United Arab Emirates',
  'Uruguay',
  'USA',
  'Uzbekistan',
  'Vanuatu',
  'Vatican',
  'Venezuela',
  'Viet Nam',
  'Yemen',
  'Zambia',
  'Zimbabwe',
];

const countryCodes = [
  '1',
  '226',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  '224',
  '11',
  '220',
  '12',
  '13',
  '14',
  '15',
  '16',
  '17',
  '83',
  '18',
  '19',
  '20',
  '21',
  '22',
  '23',
  '24',
  '25',
  '26',
  '27',
  '28',
  '29',
  '30',
  '31',
  '32',
  '33',
  '34',
  '35',
  '36',
  '37',
  '191',
  '38',
  '97',
  '39',
  '40',
  '42',
  '43',
  '44',
  '45',
  '100',
  '46',
  '222',
  '47',
  '194',
  '142',
  '48',
  '49',
  '50',
  '51',
  '193',
  '52',
  '53',
  '54',
  '219',
  '55',
  '56',
  '57',
  '58',
  '66',
  '59',
  '61',
  '63',
  '64',
  '65',
  '67',
  '68',
  '69',
  '205',
  '70',
  '71',
  '180',
  '73',
  '74',
  '72',
  '75',
  '76',
  '77',
  '78',
  '79',
  '80',
  '81',
  '82',
  '208',
  '89',
  '84',
  '85',
  '87',
  '86',
  '88',
  '90',
  '91',
  '92',
  '93',
  '94',
  '95',
  '96',
  '99',
  '186',
  '225',
  '101',
  '98',
  '102',
  '104',
  '105',
  '103',
  '106',
  '107',
  '108',
  '109',
  '110',
  '111',
  '112',
  '113',
  '115',
  '116',
  '117',
  '118',
  '119',
  '121',
  '122',
  '123',
  '124',
  '125',
  '126',
  '127',
  '128',
  '129',
  '130',
  '120',
  '131',
  '132',
  '133',
  '134',
  '137',
  '136',
  '144',
  '138',
  '139',
  '140',
  '141',
  '143',
  '145',
  '146',
  '147',
  '148',
  '149',
  '150',
  '60',
  '151',
  '152',
  '153',
  '154',
  '155',
  '156',
  '157',
  '158',
  '174',
  '177',
  '179',
  '160',
  '161',
  '162',
  '164',
  '165',
  '166',
  '167',
  '168',
  '223',
  '169',
  '170',
  '159',
  '171',
  '185',
  '221',
  '172',
  '173',
  '175',
  '176',
  '181',
  '182',
  '184',
  '183',
  '163',
  '187',
  '189',
  '188',
  '190',
  '203',
  '178',
  '192',
  '197',
  '114',
  '195',
  '196',
  '198',
  '199',
  '200',
  '204',
  '201',
  '202',
  '206',
  '207',
  '62',
  '209',
  '210',
  '211',
  '212',
  '213',
  '214',
  '215',
  '216',
  '217',
  '218',
];
const fuse = new Fuse(countryData, { keys: ['name'], threshold: 0.5 });

const weights = [
  '50',
  '100',
  '250',
  '500',
  '1000',
  '2000',
  '5000',
  '10000',
  '15000',
  '20000',
  '25000',
  '30000',
  '35000',
];

const prices = {};

console.log(
  countryCodes[0].padStart(3, '0'),
  numericToAlpha3(countryCodes[0].padStart(3, '0')),
  numericToAlpha3(countryCodes[0]),
);

const timeout = 500;

for (const [i, c] of countryCodes.entries()) {
  const [match] = fuse.search(websiteCountryNames[i]);
  if (!match) continue;
  const iso3 = match.item['alpha-3'];

  for (const [j, w] of weights.entries()) {
    setTimeout(() => {
      console.log(url(c, w));

      axios
        .get(url(c, w))
        .then(({ data }) => {
          prices[iso3] = prices[iso3] || [];
          prices[iso3].push(data);
        })
        .catch(err => console.log(err.message));
    }, timeout * (weights.length * i + j));
  }

  setTimeout(
    () => console.log(Object.keys(prices)),
    timeout * weights.length * i,
  );
}

setTimeout(
  () =>
    writeFile(
      join(__dirname, './prices.json'),
      JSON.stringify(prices, null, 2),
      err => {
        if (err) throw err;

        console.log('Successful write');
      },
    ),
  timeout * (weights.length + 1) * countryCodes.length,
);
